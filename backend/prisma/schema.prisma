// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String
  address      String?        @db.Text
  phone_number String?
  image_url    String?
  created_At   DateTime       @default(now())
  updated_At   DateTime       @updatedAt
  account_type AccountType    @default(USER)
  password     String?
  reviews      Review[]
  cart         Cart?
  order        Order[]
  staff        Vendor_staff[]
}

model Vendor {
  id                String         @id @default(uuid())
  address           String         @db.Text
  name              String         @unique
  phone_number      String
  created_At        DateTime       @default(now())
  updated_At        DateTime       @updatedAt
  account_status    Boolean
  pay_online        Boolean
  pay_on_delivery   Boolean
  pick_up           Boolean
  store_description String         @db.Text
  email             String         @unique
  vendor_image      String
  vendor_pin        String
  staff             Vendor_staff[]
  product           Product[]
  Category          Category[]
  order             Order[]
}

model Vendor_staff {
  id             String   @id @default(uuid())
  account_status Boolean
  vendor         Vendor   @relation(fields: [vendorId], references: [id])
  vendorId       String
  created_At     DateTime @default(now())
  updated_At     DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@index([vendorId])
  @@index([userId])
}

model Product {
  id            String      @id @default(uuid())
  product_name  String
  product_image String
  price         Int
  quantity      Int
  description   String      @db.Text
  vendorId      String
  vendor        Vendor      @relation(fields: [vendorId], references: [id])
  categories    Category    @relation(fields: [categorieId], references: [id])
  categorieId   String
  reviews       Review[]
  cartItems     CartItem[]
  orderItmes    OrderItem[]
  created_At    DateTime    @default(now())
  updated_At    DateTime    @updatedAt

  @@index([vendorId])
  @@index([categorieId])
}

model Category {
  id         String    @id @default(uuid())
  name       String
  product    Product[]
  vendorId   String
  vendor     Vendor    @relation(fields: vendorId, references: id)
  created_At DateTime  @default(now())
  updated_At DateTime  @updatedAt

  @@index([vendorId])
}

model Review {
  id         String   @id @default(uuid())
  rating     String?
  comment    String?
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Cart {
  id         String   @id @default(uuid())
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])

  cartItems CartItem[]

  @@index([userId])
}

model CartItem {
  id         String   @id @default(uuid())
  quantity   Int
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  cartId     String
  cart       Cart     @relation(fields: [cartId], references: [id])
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  @@index([productId])
  @@index([cartId])
}

model Order {
  id               String          @id @default(uuid())
  created_At       DateTime        @default(now())
  updated_At       DateTime        @updatedAt
  totalAmount      Float
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  delivery_options DeliveryOptions
  vendorId         String
  vendor           Vendor          @relation(fields: [vendorId], references: [id])
  order_status     OrderStatus     @default(PENDING)
  delivery_number  String?
  action_id        String?
  payment_options  PaymentOptions
  orderitem        OrderItem[]
  payment          Payment?

  @@index([userId])
  @@index([vendorId])
}

model OrderItem {
  id             String   @id @default(uuid())
  quantity       Int
  price_per_unit Int
  orderId        String
  order          Order    @relation(fields: [orderId], references: [id])
  productId      String
  product        Product  @relation(fields: [productId], references: [id])
  created_At     DateTime @default(now())
  updated_At     DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id           String   @id @default(uuid())
  orderId      String   @unique
  order        Order    @relation(fields: [orderId], references: [id])
  created_At   DateTime @default(now())
  updated_At   DateTime @updatedAt
  reference_id String

  @@index([orderId])
}

enum AccountType {
  USER
  VENDOR
  STAFF
}

enum DeliveryOptions {
  PICKUP
  DELIVERY
}

enum PaymentOptions {
  ONLINE
  OFFLINE
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
}
